{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","_super","call","state","web3","account","message","messageHash","verifyInstance","signature","recoveredAddress","loading","handleChange","bind","assertThisInitialized","signMessage","verify","_callee","regenerator_default","a","wrap","_context","prev","next","loadWeb3","loadBlockchainData","stop","_callee2","_context2","window","ethereum","Web3","enable","setState","currentProvider","alert","_callee3","accounts","networkId","networkData","_context3","eth","getAccounts","sent","net","getId","Verification","networks","Contract","abi","address","_callee4","event","hashedMessage","_context4","target","value","utils","sha3","_callee6","_this2","_context6","console","log","sign","_ref","asyncToGenerator","mark","_callee5","err","result","_context5","_x2","_x3","apply","arguments","_callee7","_context7","methods","recover","react_default","createElement","className","href","rel","concat","role","contractAddress","onChange","type","id","name","style","width","fontSize","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kl4DAiLeA,0CA1Kb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAI,EAAAC,KAAAF,KAAMJ,IACDO,MAAQ,CACXC,KAAM,GACNC,QAAS,GACTC,QAAS,MACTC,YAAa,MACbC,eAAgB,GAChBC,UAAU,MACVC,iBAAkB,MAClBC,SAAS,GAEXd,EAAKe,aAAef,EAAKe,aAAaC,KAAlBf,OAAAgB,EAAA,EAAAhB,CAAAD,IACpBA,EAAKkB,YAAclB,EAAKkB,YAAYF,KAAjBf,OAAAgB,EAAA,EAAAhB,CAAAD,IACnBA,EAAKmB,OAASnB,EAAKmB,OAAOH,KAAZf,OAAAgB,EAAA,EAAAhB,CAAAD,IAdGA,8FAiBnB,SAAAoB,IAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACQvB,KAAKwB,WADb,cAAAH,EAAAE,KAAA,EAEQvB,KAAKyB,qBAFb,wBAAAJ,EAAAK,SAAAT,EAAAjB,2HAKA,SAAA2B,IAAA,OAAAT,EAAAC,EAAAC,KAAA,SAAAQ,GAAA,cAAAA,EAAAN,KAAAM,EAAAL,MAAA,WACMM,OAAOC,SADb,CAAAF,EAAAL,KAAA,eAEIM,OAAOzB,KAAO,IAAI2B,IAAKF,OAAOC,UAFlCF,EAAAL,KAAA,EAGUM,OAAOC,SAASE,SAH1B,OAIIhC,KAAKiC,SAAS,CAAC7B,KAAMyB,OAAOzB,OAJhCwB,EAAAL,KAAA,eAMWM,OAAOzB,MACdyB,OAAOzB,KAAO,IAAI2B,IAAKF,OAAOzB,KAAK8B,iBACnClC,KAAKiC,SAAS,CAAC7B,KAAMyB,OAAOzB,QAG5ByB,OAAOM,MAAM,uEAXjB,wBAAAP,EAAAF,SAAAC,EAAA3B,qIAeA,SAAAoC,IAAA,IAAAhC,EAAAiC,EAAAC,EAAAC,EAAA/B,EAAA,OAAAU,EAAAC,EAAAC,KAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,cACQnB,EAAOyB,OAAOzB,KADtBoC,EAAAjB,KAAA,EAGyBnB,EAAKqC,IAAIC,cAHlC,cAGQL,EAHRG,EAAAG,KAIE3C,KAAKiC,SAAS,CAAE5B,QAASgC,EAAS,KAJpCG,EAAAjB,KAAA,EAM0BnB,EAAKqC,IAAIG,IAAIC,QANvC,UAMQP,EANRE,EAAAG,OAOQJ,EAAcO,EAAaC,SAAST,IAP5C,CAAAE,EAAAjB,KAAA,gBAUUf,EAAiB,IAAIJ,EAAKqC,IAAIO,SAASF,EAAaG,IAAKV,EAAYW,SAV/EV,EAAAjB,KAAA,GAWUvB,KAAKiC,SAAS,CAAEzB,mBAX1B,eAAAgC,EAAAjB,KAAA,GAaUvB,KAAKiC,SAAS,CAAEtB,SAAS,IAbnC,QAAA6B,EAAAjB,KAAA,iBAeIM,OAAOM,MAAM,2DAfjB,yBAAAK,EAAAd,SAAAU,EAAApC,+HAmBA,SAAAmD,EAAmBC,GAAnB,IAAA9C,EAAA+C,EAAA,OAAAnC,EAAAC,EAAAC,KAAA,SAAAkC,GAAA,cAAAA,EAAAhC,KAAAgC,EAAA/B,MAAA,cACQjB,EAAU8C,EAAMG,OAAOC,MAD/BF,EAAA/B,KAAA,EAEQvB,KAAKiC,SAAS,CAAC3B,YAFvB,cAGQ+C,EAAgBrD,KAAKG,MAAMC,KAAKqD,MAAMC,KAAK1D,KAAKG,MAAMG,SAH9DgD,EAAA/B,KAAA,EAIQvB,KAAKiC,SAAS,CAACoB,kBAJvB,wBAAAC,EAAA5B,SAAAyB,EAAAnD,+HAOA,SAAA2D,IAAA,IAAAN,EAAAO,EAAA5D,KAAA,OAAAkB,EAAAC,EAAAC,KAAA,SAAAyC,GAAA,cAAAA,EAAAvC,KAAAuC,EAAAtC,MAAA,OACQ8B,EAAgBrD,KAAKG,MAAMC,KAAKqD,MAAMC,KAAK1D,KAAKG,MAAMG,SAC5DwD,QAAQC,IAAI,gBAAiBV,GAC1BrD,KAAKG,MAAME,QACZL,KAAKG,MAAMC,KAAKqC,IAAIuB,KAAKX,EAAerD,KAAKG,MAAME,QAAnD,eAAA4D,EAAAnE,OAAAoE,EAAA,EAAApE,CAAAoB,EAAAC,EAAAgD,KAA4D,SAAAC,EAAOC,EAAKC,GAAZ,OAAApD,EAAAC,EAAAC,KAAA,SAAAmD,GAAA,cAAAA,EAAAjD,KAAAiD,EAAAhD,MAAA,WACvD8C,EADuD,CAAAE,EAAAhD,KAAA,QAExDuC,QAAQC,IAAI,2CAF4CQ,EAAAhD,KAAA,sBAAAgD,EAAAhD,KAAA,EAIlDqC,EAAK3B,SAAS,CAAC1B,YAAa8C,IAJsB,cAAAkB,EAAAhD,KAAA,EAKlDqC,EAAK3B,SAAS,CAACxB,UAAW6D,IALwB,wBAAAC,EAAA7C,SAAA0C,MAA5D,gBAAAI,EAAAC,GAAA,OAAAR,EAAAS,MAAA1E,KAAA2E,YAAA,IASAxC,MAAM,wDAbV,wBAAA0B,EAAAnC,SAAAiC,EAAA3D,yHAiBA,SAAA4E,IAAA,IAAAN,EAAA,OAAApD,EAAAC,EAAAC,KAAA,SAAAyD,GAAA,cAAAA,EAAAvD,KAAAuD,EAAAtD,MAAA,WACKvB,KAAKG,MAAMK,eADhB,CAAAqE,EAAAtD,KAAA,YAEgC,QAAzBvB,KAAKG,MAAMM,UAFlB,CAAAoE,EAAAtD,KAAA,eAAAsD,EAAAtD,KAAA,EAG2BvB,KAAKG,MAAMK,eAAesE,QAAQC,QAAQ/E,KAAKG,MAAMI,YAAaP,KAAKG,MAAMM,WAAWP,OAHnH,cAGYoE,EAHZO,EAAAlC,KAAAkC,EAAAtD,KAAA,EAIYvB,KAAKiC,SAAS,CAACvB,iBAAkB4D,IAJ7C,OAAAO,EAAAtD,KAAA,gBAMMY,MAAM,iCANZ,QAAA0C,EAAAtD,KAAA,iBASIY,MAAM,sFATV,yBAAA0C,EAAAnD,SAAAkD,EAAA5E,mFAcA,WAEE,OACEgF,EAAA7D,EAAA8D,cAAA,WACED,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,kEACbF,EAAA7D,EAAA8D,cAAA,KACEC,UAAU,sCACVC,KAAK,4CACL5B,OAAO,SACP6B,IAAI,uBAJN,qBAQAJ,EAAA7D,EAAA8D,cAAA,KACIC,UAAU,OACVC,KAAI,gCAAAE,OAAkCrF,KAAKG,MAAME,SACjDkD,OAAO,SACP6B,IAAI,uBAJR,qBAMsBpF,KAAKG,MAAME,UAGnC2E,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,wBACbF,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,OACbF,EAAA7D,EAAA8D,cAAA,QAAMK,KAAK,OAAOJ,UAAU,gCAC1BF,EAAA7D,EAAA8D,cAAA,OAAKC,UAAU,gCACbF,EAAA7D,EAAA8D,cAAA,sBACAD,EAAA7D,EAAA8D,cAAA,qGACAD,EAAA7D,EAAA8D,cAAA,SACEzB,MAAOxD,KAAKG,MAAMoF,gBAClBC,SAAUxF,KAAKY,aACf6E,KAAK,OACLC,GAAG,UACHC,KAAK,UACLC,MAAO,CAAEC,MAAM,UAEjBb,EAAA7D,EAAA8D,cAAA,UACAD,EAAA7D,EAAA8D,cAAA,UACAD,EAAA7D,EAAA8D,cAAA,6BAAoBD,EAAA7D,EAAA8D,cAAA,KAAGW,MAAO,CAACE,SAAS,WAApB,IAAkC9F,KAAKG,MAAMkD,gBACjE2B,EAAA7D,EAAA8D,cAAA,UACEC,UAAU,8BACVa,QAAW/F,KAAKe,aAFlB,kBAMAiE,EAAA7D,EAAA8D,cAAA,WACAD,EAAA7D,EAAA8D,cAAA,WACAD,EAAA7D,EAAA8D,cAAA,wBAAeD,EAAA7D,EAAA8D,cAAA,KAAGW,MAAO,CAACE,SAAS,WAApB,IAAkC9F,KAAKG,MAAMM,YAC5DuE,EAAA7D,EAAA8D,cAAA,UACAD,EAAA7D,EAAA8D,cAAA,UACEC,UAAU,8BACVa,QAAW/F,KAAKgB,QAFlB,qBAMAgE,EAAA7D,EAAA8D,cAAA,UACAD,EAAA7D,EAAA8D,cAAA,gCAAuBD,EAAA7D,EAAA8D,cAAA,KAAGW,MAAO,CAACE,SAAS,WAApB,IAAiC9F,KAAKG,MAAMO,mBACnEsE,EAAA7D,EAAA8D,cAAA,WACAD,EAAA7D,EAAA8D,cAAA,WACAD,EAAA7D,EAAA8D,cAAA,KACEC,UAAU,WACVC,KAAK,4BACL5B,OAAO,SACP6B,IAAI,uBAJN,gCAM+BJ,EAAA7D,EAAA8D,cAAA,SAAGD,EAAA7D,EAAA8D,cAAA,gCAjKhCe,aCOEC,QACW,cAA7BpE,OAAOqE,SAASC,UAEe,UAA7BtE,OAAOqE,SAASC,UAEhBtE,OAAOqE,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAA7D,EAAA8D,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.77fd9f2e.chunk.js","sourcesContent":["import Verification from '../abis/Verification.json'\nimport React, { Component } from 'react';\nimport Web3 from 'web3'\nimport './App.css'\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      web3: '',\n      account: '',\n      message: '0x0',\n      messageHash: '0x0',\n      verifyInstance: '',\n      signature:'0x0',\n      recoveredAddress: '0x0',\n      loading: false\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.signMessage = this.signMessage.bind(this)\n    this.verify = this.verify.bind(this)\n  }\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n      this.setState({web3: window.web3})\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n      this.setState({web3: window.web3})\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n    // Network ID\n    const networkId = await web3.eth.net.getId()\n    const networkData = Verification.networks[networkId]\n    if(networkData) {\n      // set connection to contract in state\n      const verifyInstance = new web3.eth.Contract(Verification.abi, networkData.address)\n      await this.setState({ verifyInstance })\n      // set loading false after getting from blockchain\n      await this.setState({ loading: false})\n    } else {\n      window.alert('Verifciation contract not deployed to detected network.')\n    }\n  }\n\n  async handleChange(event) {\n    const message = event.target.value\n    await this.setState({message})\n    const hashedMessage = this.state.web3.utils.sha3(this.state.message)\n    await this.setState({hashedMessage})\n  }\n\n  async signMessage() {\n    const hashedMessage = this.state.web3.utils.sha3(this.state.message)\n    console.log('hashedMessage', hashedMessage)\n    if(this.state.account) {\n      this.state.web3.eth.sign(hashedMessage, this.state.account, async (err, result) => {\n        if(err) {\n          console.log('Something went wrong! Please try again!')\n        } else {\n          await this.setState({messageHash: hashedMessage})\n          await this.setState({signature: result})\n        }\n      })\n    } else {\n      alert('Connect to Metamask to sign message with an account!')\n    }\n  }\n\n  async verify() {\n    if(this.state.verifyInstance) {\n      if(this.state.signature !== '0x0') {\n        const result = await this.state.verifyInstance.methods.recover(this.state.messageHash, this.state.signature).call()\n        await this.setState({recoveredAddress: result})\n      } else {\n        alert('Signature to verify required!')\n      }\n    } else {\n      alert('Verify Instance not picked up on network! Deploy or connect to appropriate network')\n    }\n    \n  }\n\n  render() {\n\n    return (\n      <div>\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n          <a\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n            href=\"https://futureselfcollection.square.site/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            SignIt & Verified \n          </a>\n          <a\n              className=\"mr-5\"\n              href={`https://etherscan.io/address/${this.state.account}`}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n          >\n             MetaMask Address: {this.state.account}\n          </a>\n        </nav>\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n              <div className=\"content mt-5 mr-auto ml-auto\">\n                <h1>Sign It </h1>\n                <p>Sign a message from your account with the form below and broadcast it to the blockchain!</p>\n                <input \n                  value={this.state.contractAddress}\n                  onChange={this.handleChange}\n                  type=\"text\" \n                  id=\"message\" \n                  name=\"message\" \n                  style={{ width:\"100%\"}}\n                ></input>\n                <p></p>\n                <p></p>\n                <h2>Hashed Message: <p style={{fontSize:\"0.9rem\"}} > {this.state.hashedMessage}</p></h2>\n                <button\n                  className=\"mt-2 btn btn-primary btn-lg\"\n                  onClick = {this.signMessage}\n                >\n                  SignIt & Send!\n                </button>\n                <br/>\n                <hr/>\n                <h1>Signature: <p style={{fontSize:\"0.9rem\"}} > {this.state.signature}</p></h1>\n                <p></p>\n                <button\n                  className=\"mt-2 btn btn-primary btn-lg\"\n                  onClick = {this.verify}\n                >\n                  Verify & Recover!\n                </button>\n                <p></p>\n                <h2>Recovered Address: <p style={{fontSize:\"0.9rem\"}}> {this.state.recoveredAddress}</p></h2>\n                <br/>\n                <br/>\n                <a\n                  className=\"App-link\"\n                  href=\"https://futureplex.store/\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  FuturePLEX NFT Market: Visit <u><b>NOW! </b></u>\n                </a>\n              </div>\n            </main>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}